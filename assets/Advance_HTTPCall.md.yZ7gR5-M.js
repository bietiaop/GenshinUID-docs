import{_ as t}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.D3Jit8bU.js";import{_ as l}from"./chunks/Badge.Gth0UqrR.js";import{_ as p,c as h,j as i,a as s,I as a,a4 as r,o as k}from"./chunks/framework.AIsPoTDm.js";import"./chunks/theme.Dd7k7j-1.js";const f=JSON.parse('{"title":"HTTP调用","description":"","frontmatter":{},"headers":[],"relativePath":"Advance/HTTPCall.md","filePath":"Advance/HTTPCall.md","lastUpdated":1723983741000}'),d={name:"Advance/HTTPCall.md"},c={id:"http调用",tabindex:"-1"},o=i("a",{class:"header-anchor",href:"#http调用","aria-label":'Permalink to "HTTP调用<Badge type="tip" text="普通" />"'},"​",-1),E=r(`<div class="info custom-block"><p class="custom-block-title">INFO</p><p>在某些情况下，你的<strong>业务需求</strong>可能并不允许你进行WS连接，</p><p>这时候就需要使用HTTP调用方式。</p><p>HTTP调用方式<strong>依旧需要提供</strong>完整的MessageReceive结构体。</p></div><ol><li>打开GsCore的HTTP模式（和WS<strong>并不冲突</strong>，但仍然建议<strong>不使用时关闭</strong>） <ul><li>打开<code>gsuid_core/gsuid_core/config.json</code></li><li>找到<code>ENABLE_HTTP</code>配置项，将其设置为<code>true</code></li></ul></li><li>依旧是默认8765端口（如有自行修改，以修改的为准），终结点为<code>/api/send_msg</code></li><li>POST方法，数据内容为<code>MessageReceive</code>，<a href="./../CodeAdapter/Pack.html">数据结构</a>，以下为调用示例：</li></ol><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http_test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to_builtins(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        MessageReceive(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                MessageSegment.text(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;强制刷新&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> httpx.AsyncClient(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.post(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &#39;http://127.0.0.1:8765/api/send_msg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            json</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.text)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.status_code)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ol start="4"><li><p>返回结构为一个字典，并带有两个参数：</p><table tabindex="0"><thead><tr><th>Key列表</th><th>Value列表</th><th>可能的值</th></tr></thead><tbody><tr><td>status_code</td><td>int</td><td>200：成功<br>-100：失败</td></tr><tr><td>data</td><td>MessageSend</td><td>成功为：<code>MessageSend</code><br>失败为：None</td></tr></tbody></table></li></ol>`,4);function g(y,b,m,_,u,F){const n=l,e=t;return k(),h("div",null,[i("h1",c,[s("HTTP调用"),a(n,{type:"tip",text:"普通"}),s(),o]),a(e,{readTime:"1",words:"241"}),E])}const v=p(d,[["render",g]]);export{f as __pageData,v as default};
