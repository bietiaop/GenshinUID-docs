import{_ as o}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.576d70b4.js";import{_ as e}from"./chunks/Badge.167f4610.js";import{_ as t,o as c,c as r,k as a,a as s,H as n,Q as y}from"./chunks/framework.d8868ba7.js";import"./chunks/commonjsHelpers.725317a4.js";const v=JSON.parse('{"title":"CallBot","description":"","frontmatter":{},"headers":[],"relativePath":"CodePlugins/BotCall.md","filePath":"CodePlugins/BotCall.md","lastUpdated":1720438367000}'),i={name:"CodePlugins/BotCall.md"},E={id:"callbot",tabindex:"-1"},b=a("a",{class:"header-anchor",href:"#callbot","aria-label":'Permalink to "CallBot<Badge type="tip" text="简单" />"'},"​",-1),d=y(`<div class="tip custom-block"><p class="custom-block-title">💡 提醒</p><p>进行发送消息时需要获取<strong>当前准确</strong>的<strong>Bot实例</strong>，用于调用<code>Bot.send()</code></p><p>但在某些情况下，可能函数嵌套的层数过多，外层的Bot实例一层一层传入较为麻烦</p><p>我们可以使用<strong>自带</strong>的<strong>Bot模块</strong>中的<code>call_bot()</code>方法</p><p>找到当前的、准确的Bot实例</p></div><p>代码参考如下：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> gsuid_core.bot </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> call_bot</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">(a: </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">, b: </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 假设这是一个嵌套很多层的函数，传参不太好修改</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(a)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(b)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 但是仍然想让bot在运行到该行时发送消息</span></span>
<span class="line"><span style="color:#E1E4E8;">    bot </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> call_bot()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 获取当前Bot实例，以及发送消息</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> bot.send(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">a</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;"> + </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">b</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 也可以写成一行</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> call_bot().send(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">a</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;"> + </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">b</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> gsuid_core.bot </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> call_bot</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(a: </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">, b: </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 假设这是一个嵌套很多层的函数，传参不太好修改</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(a)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(b)</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 但是仍然想让bot在运行到该行时发送消息</span></span>
<span class="line"><span style="color:#24292E;">    bot </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> call_bot()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 获取当前Bot实例，以及发送消息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> bot.send(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">a</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> + </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">b</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 也可以写成一行</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> call_bot().send(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">a</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> + </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">b</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>这么做的<strong>好处</strong>：</p><ul><li>可以避免变量<code>bot</code>在一层一层函数间传递，结构化代码并且避免过度耦合</li><li>某些代码历史缘故，不太好增加或删除传参，但又想发送消息</li></ul><p>这么做的<strong>坏处</strong>：</p><ul><li>Debug时难以定位具体发送位置</li><li>会有一定性能损耗（存在查找当前frame存在的实例过程）</li></ul><p>该方法<strong>不支持的</strong>！！：</p><ul><li>你的当前函数<strong>运行于</strong>一个<strong>不存在于任何一个有效Bot的帧</strong>中 <ul><li>例如定时任务：无法直接使用<code>await call_bot().send()</code>，但是可以使用<code>await call_bot().target_send()</code></li><li>例如某些工具函数，不由Bot响应</li></ul></li></ul>`,9);function F(_,u,m,C,B,g){const l=e,p=o;return c(),r("div",null,[a("h1",E,[s("CallBot"),n(l,{type:"tip",text:"简单"}),s(),b]),n(p,{readTime:"1",words:"359"}),d])}const k=t(i,[["render",F]]);export{v as __pageData,k as default};
