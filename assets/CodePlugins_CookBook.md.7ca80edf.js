import{_ as c,a as i}from"./chunks/ChatMessage.vue_vue_type_style_index_0_lang.3277c88f.js";import{_ as y}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.576d70b4.js";import{_ as E}from"./chunks/Badge.167f4610.js";import{_ as d,o as b,c as g,k as p,a as n,H as s,w as a,Q as o}from"./chunks/framework.d8868ba7.js";import"./chunks/commonjsHelpers.725317a4.js";const m="/assets/image-20240601033727344.526980b7.png",u="/assets/image-20240601194410390.17eeb089.png",F="/assets/image-20240601220233918.a32e4009.png",_="/assets/image-20240601220452874.0d3408bf.png",h="/assets/image-20240601225427010.b2a5eebe.png",G=JSON.parse('{"title":"插件开发指南","description":"","frontmatter":{},"headers":[],"relativePath":"CodePlugins/CookBook.md","filePath":"CodePlugins/CookBook.md","lastUpdated":1717365238000}'),A={name:"CodePlugins/CookBook.md"},D={id:"插件开发指南",tabindex:"-1"},v=p("a",{class:"header-anchor",href:"#插件开发指南","aria-label":'Permalink to "插件开发指南 <Badge type="tip" text="普通" />"'},"​",-1),C=o(`<div class="tip custom-block"><p class="custom-block-title">💡 提醒</p><ul><li><p>🎉 该文档将从最基础的创建项目结构开始，直至创建一个<strong>能正常使用功能</strong>的GsCore插件。</p></li><li><p>🤗 该文档适用于<strong>任何人</strong>，哪怕<em>你没有最基本的Python知识</em>，也能通过该文档进行<strong>学习</strong>。</p><ul><li>但是你需要拥有基本的<strong>耐心</strong>，一颗善于<strong>学习的心</strong>、以及最基本的<strong>互联网查找技能</strong></li></ul></li></ul></div><h2 id="_0、在开始前" tabindex="-1">0、在开始前 <a class="header-anchor" href="#_0、在开始前" aria-label="Permalink to &quot;0、在开始前&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">📝 备注</p><p>在编写代码开始前，请先确保你安装了<strong>最基本的环境</strong>。</p><p>注意：以下说的是你的本地开发环境，而非Bot部署环境（服务器）</p></div><ul><li><p>🛠 你已经通过<a href="/Started/EnvCheck.html">该文档</a>安装并检查了如下工具：</p><ul><li><strong>Python</strong> 3.8及以上（建议3.11）</li><li>git</li><li>poetry/pdm <ul><li>注意：本次教程<strong>将会使用</strong><code>PDM</code>作为项目(包)管理工具，poetry操作类似但略有不同</li></ul></li></ul></li><li><p>🚀 你已经通过<a href="/Started/InstallCore.html">该教程</a>安装并成功<a href="/Started/StartCore.html">运行</a>本项目，即<strong>GsCore正常运行</strong></p></li><li><p>🤖 你已经<strong>成功</strong>运行任何一个Bot端和服务端，并能使用IM软件与你的Bot进行对话</p><ul><li><strong>Bot端</strong>：NoneBot2、HoshinoBot、Koishi、Yunzai、等等.....</li><li><strong>协议端</strong>：Go-CQHTTP、NapCat、或者某些Bot自带的协议适配器、等等.....</li><li><strong>IM软件</strong>：QQ、QQ频道、Discord、Telegram、KOOK、DODO、微信、等等.....</li><li><strong>和Bot对话</strong>：发送命令<code>core状态</code>，Bot能够正确进行回复</li></ul></li><li><p>⌨ 安装任意一个代码编辑器，这里推荐<strong>VSC</strong>，也就是<a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">Visual Studio Code</a></p><ul><li>当然你也可以选择使用<em>PyCharm</em>，但以下内容<strong>将以VSC为范例</strong>。</li></ul></li></ul><h2 id="_1、明确项目需求" tabindex="-1">1、明确项目需求 <a class="header-anchor" href="#_1、明确项目需求" aria-label="Permalink to &quot;1、明确项目需求&quot;">​</a></h2><p>本次我们的任务目标，是编写一个经典的<strong>天气插件</strong>，该插件拥有两个命令：</p><ul><li>以漳州为例，当用户发送<code>漳州天气</code>或者<code>天气漳州</code>，机器人将发送该城市的天气</li><li>用户可以发送<code>绑定城市漳州</code>，之后下次用户可以直接发送<code>天气</code>进行查询<code>漳州</code>天气，无需额外输入 <ul><li>如果用户没有绑定任何城市，发送<code>天气</code>需要默认查询北京天气</li><li>支持多个城市绑定，假设用户发送<code>绑定城市漳州</code>和<code>绑定城市福州</code>两个命令，即绑定漳州、福州两个城市，下次用户发送<code>天气</code>时，将自动发送两个城市的今日天气</li></ul></li></ul><h2 id="_2、创建项目结构" tabindex="-1">2、创建项目结构 <a class="header-anchor" href="#_2、创建项目结构" aria-label="Permalink to &quot;2、创建项目结构&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">📝 备注</p><p>尽管我们这次的任务目标<strong>很简单</strong>，但在编写代码开始前，</p><p><strong>做好项目结构规划</strong>是必不可少的，养成良好习惯很<strong>重要</strong>。</p></div><div class="tip custom-block"><p class="custom-block-title">💡 提醒</p><p>在GsCore中，插件将会被放置在<code>/gsuid_core/plugins</code><strong>目录</strong>下</p></div><ol start="0"><li><p>打开命令行工具，检查路径是否在插件目录下</p></li><li><p>如果不在，键入命令<code>cd gsuid_core/plugins</code>可能有用（命令<code>cd</code>后跟路径可移动当前命令行工作目录）</p></li><li><p>在<code>plugins</code>目录下创建一个文件夹，命名为<strong>gs_weather</strong></p></li><li><p>进入该文件夹，确保路径（<code>gsuid_core/plugins/gs_weather</code>）正确之后，使用命令<code>pdm init</code></p><ol><li><p>在这一步会有许多的交互式命令，要求你输入一些关于你项目的信息</p><ul><li>💡输入y回车代表<strong>是</strong>，输入n回车代表<strong>否</strong>；部分问题需要直接输入信息</li></ul></li><li><p>按照流程走完创建初始化（下面会提供一些问题的参考）。</p><ul><li><p>💻 Would you like to create a virtualenv with <em>balabalabala......</em></p><ul><li>该问题是在询问你是否创建一个关于你项目的<strong>虚拟环境</strong>，这里输入<strong>n</strong>回车</li></ul></li><li><p>💻 Project name (plugins)：</p><ul><li>该问题是在询问<strong>你的项目名称</strong>，也会作为你的文件夹名称，这里输入<strong>gs_weather</strong>回车</li></ul></li><li><p>💻 Project version (0.1.0)：</p><ul><li>该问题是在询问<strong>你的项目版本号</strong>，这里我们直接回车，代表填入默认值<strong>0.1.0</strong></li></ul></li><li><p>💻 Do you want to build this project for distribution(such as wheel)?</p><ul><li>直接回车，代表填入默认值<strong>n</strong></li></ul></li><li><p>💻 License(SPDX name)：</p><ul><li>该问题是在询问<strong>你的项目发布许可</strong>，直接回车代表填入默认值<strong>MIT</strong><ul><li>也可以选<strong>GPL-3.0</strong>或者其他，具体可以百度，建议直接默认</li></ul></li></ul></li><li><p>💻 Author name (<em>balbala</em>)：</p><ul><li>该问题是在询问你（作者）的<strong>名称</strong>，<em>可以手动填入</em><ul><li>如果你已经完成git的配置，括号里默认就是你git的名字，直接回车即可</li></ul></li></ul></li><li><p>💻 Author email (balbala)：</p><ul><li>该问题是在询问你（作者）的<strong>邮箱地址</strong>，<em>可以手动填入</em><ul><li>如果你已经完成git的配置，括号里默认就是你的邮箱，直接回车即可</li></ul></li></ul></li><li><p>💻 Python requires(&#39;*&#39; to allow any) (==3.11.*)：</p><ul><li>该问题是在询问你的项目需要什么<strong>Python版本</strong>，这里根据<strong>实际情况</strong>填写 <ul><li>如果不确定，可以填入**&gt;=3.9**</li></ul></li></ul></li></ul></li></ol></li><li><p>完成初始化之后，我们检查<code>gs_weather</code>文件夹内是否<strong>成功生成一些文件&amp;文件夹</strong></p></li><li><p>这里我们需要<strong>手动修改</strong>一下文件夹结构，注意到文件夹内应该有<code>src</code>文件夹</p><ul><li>这里将<code>src</code>文件夹内的<code>gs_weather</code>文件夹直接移动到<code>src</code>文件夹外</li><li>然后删除<code>src</code>文件夹</li><li>再次进入<code>gs_weather</code>文件夹内，注意到里面应该有默认的<code>__init__.py</code>文件</li></ul></li><li><p>重新启动GsCore，发现命令行存在如下输出，代表我们的插件项目<strong>成功创建</strong>完成了！</p></li></ol><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">06-01</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">03</span><span style="color:#9ECBFF;">:29:51</span><span style="color:#E1E4E8;"> [DEBUG] gsuid_core.server </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">导入gs_weather中...</span></span>
<span class="line"><span style="color:#B392F0;">06-01</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">03</span><span style="color:#9ECBFF;">:29:51</span><span style="color:#E1E4E8;"> [SUCCESS] gsuid_core.server </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">插件gs_weather导入成功!</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">06-01</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">03</span><span style="color:#032F62;">:29:51</span><span style="color:#24292E;"> [DEBUG] gsuid_core.server </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">导入gs_weather中...</span></span>
<span class="line"><span style="color:#6F42C1;">06-01</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">03</span><span style="color:#032F62;">:29:51</span><span style="color:#24292E;"> [SUCCESS] gsuid_core.server </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">插件gs_weather导入成功!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_3、开始编写代码" tabindex="-1">3、开始编写代码 <a class="header-anchor" href="#_3、开始编写代码" aria-label="Permalink to &quot;3、开始编写代码&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">💡 提醒</p><p>首先打开<strong>VSC</strong>，注意一定要选择<strong>打开文件夹</strong>，然后选择顶层的<strong>gs_weather</strong>文件夹。</p><p>此时的项目结构（注意观察文件夹树），应该如下图所示，</p><p>我们导航到<code>gs_weather/__init__.py</code>下，开始编写我们的业务代码。</p><p><strong>注意</strong>：以下的代码如果实在无法理解是什么意思，你可以先抄入VSC中，后续再一行一行的理解</p></div><img src="`+m+`" alt="image-20240601033727344"><ol><li>导入<code>gsuid_core</code>的基本库，这里我们需要在<code>__init__.py</code>下写入以下代码，代表引用下面的库</li></ol><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 井号后面的字符代表注释和解释，不参与实际的代码功能，下文将不再提醒</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> gsuid_core.sv </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SV</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> gsuid_core.bot </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Bot</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> gsuid_core.models </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Event</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 井号后面的字符代表注释和解释，不参与实际的代码功能，下文将不再提醒</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> gsuid_core.sv </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SV</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> gsuid_core.bot </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Bot</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> gsuid_core.models </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Event</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>以第一行为例，<code>from gsuid_core.sv import SV</code>代表从<code>gsuid_core</code><strong>库</strong>的<code>sv</code><strong>模块</strong>导入了一个<strong>类</strong><code>SV</code></li><li>目前我们不需要关注<strong>SV</strong>、<strong>Bot</strong>、<strong>Event</strong>这三个类的具体含义，在下面将会逐一介绍</li></ul><ol start="2"><li><p>创建一个<strong>服务</strong>，该服务将会控制很多不同的<strong>触发器</strong>，换言之，控制不同的插件<strong>命令</strong></p><ul><li><p>什么是命令？：<strong>命令</strong>代表机器人的功能，例如<code>天气</code>就是一个<strong>命令</strong></p></li><li><p>什么是触发器？：触发器即代表<strong>命令</strong>的触发方式，例如<strong>前置触发</strong>（即<code>天气漳州</code>），还是<strong>后置触发</strong>（即<code>漳州天气</code>），以及更多的触发方式，将会在后面的文档提到。</p></li></ul></li></ol><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 这里我们创建了一个 天气信息查询 的【服务】，即SV(&#39;天气信息查询&#39;)</span></span>
<span class="line"><span style="color:#6A737D;"># 将SV(&#39;天气信息查询&#39;)对象赋予gs_weather_info，方便后续调用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">gs_weather_info </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SV(</span><span style="color:#9ECBFF;">&#39;天气信息查询&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 这里我们创建了一个 天气信息查询 的【服务】，即SV(&#39;天气信息查询&#39;)</span></span>
<span class="line"><span style="color:#6A737D;"># 将SV(&#39;天气信息查询&#39;)对象赋予gs_weather_info，方便后续调用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">gs_weather_info </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SV(</span><span style="color:#032F62;">&#39;天气信息查询&#39;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="3"><li>编写<strong>业务代码</strong>，也就是天气查询服务，这里我们先用一段简单的代码占位，在下一节，再编写实际功能。</li></ol><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 以async def开头创建一个函数，函数名为 send_weather_msg</span></span>
<span class="line"><span style="color:#6A737D;"># 该函数接受两个参数，bot和ev，参数类型分别是Bot和Event，这里如果没理解意思可以照抄</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">send_weather_msg</span><span style="color:#E1E4E8;">(bot: Bot, ev: Event):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 当函数运行到这一行的时候，发送下面的回复</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> bot.send(</span><span style="color:#9ECBFF;">&#39;[漳州天气] 今日的天气是66度，烫死人了！&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 以async def开头创建一个函数，函数名为 send_weather_msg</span></span>
<span class="line"><span style="color:#6A737D;"># 该函数接受两个参数，bot和ev，参数类型分别是Bot和Event，这里如果没理解意思可以照抄</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">send_weather_msg</span><span style="color:#24292E;">(bot: Bot, ev: Event):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 当函数运行到这一行的时候，发送下面的回复</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> bot.send(</span><span style="color:#032F62;">&#39;[漳州天气] 今日的天气是66度，烫死人了！&#39;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="4"><li>创建一个<strong>触发器</strong>，也就是实际的命令，这里需要注意，触发器将以<strong>装饰器</strong>的形式提供 <ul><li>什么是装饰器？：这块可能比较难以理解，暂时可以先硬记下来语法，日后有兴趣再深入</li><li>装饰器的语法：以@开头，<strong>一般</strong>直接加在函数定义的上一行，具体看如下代码</li></ul></li></ol><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 在我们刚刚编写的业务代码上，加上一行</span></span>
<span class="line"><span style="color:#6A737D;"># @gs_weather_info代表刚刚创建的服务，在之后加入点.代表调用触发器</span></span>
<span class="line"><span style="color:#6A737D;"># @gs_weather_info.on_command代表了调用\`on_command\`触发器</span></span>
<span class="line"><span style="color:#6A737D;"># \`on_command\`需要接受一个参数，传入我们希望的命令文字即可，这里我们填入命令\`天气\`</span></span>
<span class="line"><span style="color:#B392F0;">@gs_weather_info.on_command</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;天气&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">send_weather_msg</span><span style="color:#E1E4E8;">(bot: Bot, ev: Event):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> bot.send(</span><span style="color:#9ECBFF;">&#39;[漳州天气] 今日的天气是66度，烫死人了！&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 在我们刚刚编写的业务代码上，加上一行</span></span>
<span class="line"><span style="color:#6A737D;"># @gs_weather_info代表刚刚创建的服务，在之后加入点.代表调用触发器</span></span>
<span class="line"><span style="color:#6A737D;"># @gs_weather_info.on_command代表了调用\`on_command\`触发器</span></span>
<span class="line"><span style="color:#6A737D;"># \`on_command\`需要接受一个参数，传入我们希望的命令文字即可，这里我们填入命令\`天气\`</span></span>
<span class="line"><span style="color:#6F42C1;">@gs_weather_info.on_command</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;天气&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">send_weather_msg</span><span style="color:#24292E;">(bot: Bot, ev: Event):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> bot.send(</span><span style="color:#032F62;">&#39;[漳州天气] 今日的天气是66度，烫死人了！&#39;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="5"><li>看一下我们写的完整的代码，结合注释，一行一行的理解一下，是不是非常的简单！</li></ol><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> gsuid_core.sv </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SV</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> gsuid_core.bot </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Bot</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> gsuid_core.models </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Event</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">gs_weather_info </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SV(</span><span style="color:#9ECBFF;">&#39;天气信息查询&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@gs_weather_info.on_command</span><span style="color:#E1E4E8;">((</span><span style="color:#9ECBFF;">&#39;天气&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#FFAB70;">block</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">send_weather_msg</span><span style="color:#E1E4E8;">(bot: Bot, ev: Event):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> bot.send(</span><span style="color:#9ECBFF;">&#39;[漳州天气] 今日的天气是66度，烫死人了！&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> gsuid_core.sv </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SV</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> gsuid_core.bot </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Bot</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> gsuid_core.models </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Event</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">gs_weather_info </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SV(</span><span style="color:#032F62;">&#39;天气信息查询&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@gs_weather_info.on_command</span><span style="color:#24292E;">((</span><span style="color:#032F62;">&#39;天气&#39;</span><span style="color:#24292E;">), </span><span style="color:#E36209;">block</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">send_weather_msg</span><span style="color:#24292E;">(bot: Bot, ev: Event):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> bot.send(</span><span style="color:#032F62;">&#39;[漳州天气] 今日的天气是66度，烫死人了！&#39;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol start="6"><li>代码范例截图</li></ol><img src="`+u+'" alt="image-20240601194410390"><ol start="7"><li>实际运行一下<strong>GsCore</strong>，向Bot发送<code>天气</code>，观察Bot是否正常回复消息。</li></ol>',29),B=o('<h2 id="_4、完善业务代码" tabindex="-1">4、完善业务代码 <a class="header-anchor" href="#_4、完善业务代码" aria-label="Permalink to &quot;4、完善业务代码&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">💡 提醒</p><p>在上一节中，我们基本已经完成了一个插件的基本结构，</p><p>剩下的就是实际的业务代码部分了，</p><p>也就是如何把Bot的<em>固定回复</em>，转为<strong>真正的</strong>，根据用户<strong>传入天气</strong>，进行<strong>动态的回复</strong>。</p></div><ol><li>首先，需要获得一个天气的<strong>API接口</strong>，这里我们选择<a href="https://id.qweather.com/#/login" target="_blank" rel="noreferrer">和风天气</a>，按照页面介绍注册并登陆。 <ul><li>什么是API接口？：在网页中，API<strong>一般</strong>代表某个<strong>URL</strong>地址，通过<strong>网络请求</strong>，可以通过API得到一定返回。</li><li>例如在本次例子中，访问和风天气API，将会得到城市的天气信息<strong>返回</strong>。</li><li>我们利用这个返回值，做成我们机器人的插件即可。</li></ul></li><li>登陆成功后，我们需要创建一个开发者key，下滑找到和风天气的<a href="https://console.qweather.com/#/console" target="_blank" rel="noreferrer">开发服务控制平台</a>。 <ul><li>在右侧的<strong>我的项目</strong>中，我们点击创建即可。</li><li><strong>项目名称</strong>：随意填写</li><li><strong>订阅</strong>：免费订阅</li><li><strong>设置Key</strong>：WebAPI</li><li><strong>Key的名称</strong>：随意</li><li>点击<strong>创建</strong>即可。</li><li>返回项目管理，可以看到自己的Key列表，点击查看即可</li><li>复制好Key内容，留作备用。</li></ul></li></ol><img src="'+F+'" alt="image-20240601220233918"><ol start="3"><li>阅读和风天气的<a href="https://dev.qweather.com/docs/start/" target="_blank" rel="noreferrer">开发者文档</a>（这里你可以先不用读，我会列出本次项目需要用的API） <ul><li>测试一下API接口</li><li><a href="https://devapi.qweather.com/v7/weather/now?location=101010100&amp;key=" target="_blank" rel="noreferrer">https://devapi.qweather.com/v7/weather/now?location=101010100&amp;key=</a></li><li>将上面获得的<strong>key</strong>输入上一行<strong>URL</strong>的后面，然后在浏览器中直接回车请求</li><li>不出意外的话，你可以看到正常打开了网页，其中<code>code</code>值为200，代表<strong>成功请求</strong></li></ul></li></ol><img src="'+_+`" alt="image-20240601220452874"><ol start="4"><li><p>理解业务代码请求逻辑，捋一遍如下：</p><ul><li>用户对机器人发送<strong>天气漳州</strong></li><li>机器人获得<strong>漳州</strong>关键字，然后<strong>请求</strong>和风天气API，得到<strong>城市代码</strong></li><li>利用<strong>城市代码</strong>，<strong>请求</strong>和风天气API，得到<strong>天气数据</strong></li><li><strong>数据处理</strong>之后，转为文字，由Bot<strong>发送</strong></li></ul></li><li><p>编写代码，这里直接给出完整代码，并给予了相应<strong>注释</strong>，可以自行查看：</p></li></ol><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> gsuid_core.sv </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SV</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> gsuid_core.bot </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Bot</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> gsuid_core.models </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Event</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 导入httpx的网络请求模块</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> httpx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">gs_weather_info </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SV(</span><span style="color:#9ECBFF;">&#39;天气信息查询&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 在这里填入你自己的KEY码，在Python中，字符串使用单引号，双引号，三引号都可以。</span></span>
<span class="line"><span style="color:#6A737D;"># 这里的KEY已经失效，请申请自己的KEY使用！</span></span>
<span class="line"><span style="color:#79B8FF;">KEY</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;21e050d859ce4d6c992d23bb4f53e58a&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 这里我们额外添加一个触发器\`on_suffix\`，这个触发器用于在末尾触发命令</span></span>
<span class="line"><span style="color:#6A737D;"># 加上之后，该触发器会响应用户的\`漳州天气\`指令，而不是只响应\`天气漳州\`</span></span>
<span class="line"><span style="color:#B392F0;">@gs_weather_info.on_suffix</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;天气&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">block</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">@gs_weather_info.on_command</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;天气&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">block</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">send_weather_msg</span><span style="color:#E1E4E8;">(bot: Bot, ev: Event):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 获取用户输入的城市，如果为空，做出提醒，并用return中断函数运行</span></span>
<span class="line"><span style="color:#E1E4E8;">    text </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ev.text.strip()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> text:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> bot.send(</span><span style="color:#9ECBFF;">&#39;请输入城市名称！&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 创建一个请求客户端</span></span>
<span class="line"><span style="color:#E1E4E8;">    client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> httpx.AsyncClient()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 根据用户传入的信息，请求城市ID和城市完整名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># ev是当前事件的一系列可用信息，例如ev.text就是去除了命令之后的用户输入</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 例如用户输入 天气漳州 ，ev.text = 漳州</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 要获取完整用户输入，ev.raw_text = 天气漳州，ev.command = 天气</span></span>
<span class="line"><span style="color:#E1E4E8;">    pos_resp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.get(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;https://geoapi.qweather.com/v2/city/lookup&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">params</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;location&#39;</span><span style="color:#E1E4E8;">: text,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;key&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">KEY</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 解析结果为pyhon中的字典</span></span>
<span class="line"><span style="color:#E1E4E8;">    pos_data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pos_resp.json()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 获取结果中的响应代码</span></span>
<span class="line"><span style="color:#E1E4E8;">    pos_retcode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pos_data[</span><span style="color:#9ECBFF;">&#39;code&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 响应码不为200则发生了报错，我们把错误码返回给用户，便于定位错误信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> pos_retcode </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;200&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> bot.send(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;[天气] 获取天气信息失败！错误码为 </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">pos_retcode</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 城市ID，就是要用这个ID请求下面的天气信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        pos_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pos_data[</span><span style="color:#9ECBFF;">&#39;location&#39;</span><span style="color:#E1E4E8;">][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&#39;id&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 城市名称</span></span>
<span class="line"><span style="color:#E1E4E8;">        pos_name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pos_data[</span><span style="color:#9ECBFF;">&#39;location&#39;</span><span style="color:#E1E4E8;">][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 再进行一次请求</span></span>
<span class="line"><span style="color:#E1E4E8;">        weather_resp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.get(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;https://devapi.qweather.com/v7/weather/now&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">params</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&#39;location&#39;</span><span style="color:#E1E4E8;">: pos_id,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&#39;key&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">KEY</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        weather_data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> weather_resp.json()</span></span>
<span class="line"><span style="color:#E1E4E8;">        weather_retcode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> weather_data[</span><span style="color:#9ECBFF;">&#39;code&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 错误码处理</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> weather_data[</span><span style="color:#9ECBFF;">&#39;code&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;200&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> bot.send(</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;[天气] 获取天气信息失败！错误码为 </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">weather_retcode</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">！&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">            )</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># 现在温度</span></span>
<span class="line"><span style="color:#E1E4E8;">            now_temp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> weather_data[</span><span style="color:#9ECBFF;">&#39;now&#39;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&#39;temp&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># 现在的体感温度</span></span>
<span class="line"><span style="color:#E1E4E8;">            now_feels </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> weather_data[</span><span style="color:#9ECBFF;">&#39;now&#39;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&#39;feelsLike&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># 将结果进行字符串拼贴，便于把最后的结果呈现给用户</span></span>
<span class="line"><span style="color:#E1E4E8;">            text </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">pos_name</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">的天气是：</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">now_temp</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">度, 体感温度为: </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">now_feels</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">度！&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> bot.send(text)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> gsuid_core.sv </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SV</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> gsuid_core.bot </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Bot</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> gsuid_core.models </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Event</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 导入httpx的网络请求模块</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> httpx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">gs_weather_info </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SV(</span><span style="color:#032F62;">&#39;天气信息查询&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 在这里填入你自己的KEY码，在Python中，字符串使用单引号，双引号，三引号都可以。</span></span>
<span class="line"><span style="color:#6A737D;"># 这里的KEY已经失效，请申请自己的KEY使用！</span></span>
<span class="line"><span style="color:#005CC5;">KEY</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;21e050d859ce4d6c992d23bb4f53e58a&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 这里我们额外添加一个触发器\`on_suffix\`，这个触发器用于在末尾触发命令</span></span>
<span class="line"><span style="color:#6A737D;"># 加上之后，该触发器会响应用户的\`漳州天气\`指令，而不是只响应\`天气漳州\`</span></span>
<span class="line"><span style="color:#6F42C1;">@gs_weather_info.on_suffix</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;天气&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">block</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">@gs_weather_info.on_command</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;天气&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">block</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">send_weather_msg</span><span style="color:#24292E;">(bot: Bot, ev: Event):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 获取用户输入的城市，如果为空，做出提醒，并用return中断函数运行</span></span>
<span class="line"><span style="color:#24292E;">    text </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ev.text.strip()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> text:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> bot.send(</span><span style="color:#032F62;">&#39;请输入城市名称！&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 创建一个请求客户端</span></span>
<span class="line"><span style="color:#24292E;">    client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> httpx.AsyncClient()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 根据用户传入的信息，请求城市ID和城市完整名称</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># ev是当前事件的一系列可用信息，例如ev.text就是去除了命令之后的用户输入</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 例如用户输入 天气漳州 ，ev.text = 漳州</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 要获取完整用户输入，ev.raw_text = 天气漳州，ev.command = 天气</span></span>
<span class="line"><span style="color:#24292E;">    pos_resp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.get(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;https://geoapi.qweather.com/v2/city/lookup&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">params</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;location&#39;</span><span style="color:#24292E;">: text,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;key&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">KEY</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 解析结果为pyhon中的字典</span></span>
<span class="line"><span style="color:#24292E;">    pos_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pos_resp.json()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 获取结果中的响应代码</span></span>
<span class="line"><span style="color:#24292E;">    pos_retcode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pos_data[</span><span style="color:#032F62;">&#39;code&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 响应码不为200则发生了报错，我们把错误码返回给用户，便于定位错误信息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> pos_retcode </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;200&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> bot.send(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&#39;[天气] 获取天气信息失败！错误码为 </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">pos_retcode</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 城市ID，就是要用这个ID请求下面的天气信息</span></span>
<span class="line"><span style="color:#24292E;">        pos_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pos_data[</span><span style="color:#032F62;">&#39;location&#39;</span><span style="color:#24292E;">][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&#39;id&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 城市名称</span></span>
<span class="line"><span style="color:#24292E;">        pos_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pos_data[</span><span style="color:#032F62;">&#39;location&#39;</span><span style="color:#24292E;">][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 再进行一次请求</span></span>
<span class="line"><span style="color:#24292E;">        weather_resp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.get(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;https://devapi.qweather.com/v7/weather/now&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">params</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&#39;location&#39;</span><span style="color:#24292E;">: pos_id,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&#39;key&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">KEY</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        weather_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> weather_resp.json()</span></span>
<span class="line"><span style="color:#24292E;">        weather_retcode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> weather_data[</span><span style="color:#032F62;">&#39;code&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 错误码处理</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> weather_data[</span><span style="color:#032F62;">&#39;code&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;200&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> bot.send(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&#39;[天气] 获取天气信息失败！错误码为 </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">weather_retcode</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">！&#39;</span></span>
<span class="line"><span style="color:#24292E;">            )</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 现在温度</span></span>
<span class="line"><span style="color:#24292E;">            now_temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> weather_data[</span><span style="color:#032F62;">&#39;now&#39;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&#39;temp&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 现在的体感温度</span></span>
<span class="line"><span style="color:#24292E;">            now_feels </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> weather_data[</span><span style="color:#032F62;">&#39;now&#39;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&#39;feelsLike&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 将结果进行字符串拼贴，便于把最后的结果呈现给用户</span></span>
<span class="line"><span style="color:#24292E;">            text </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">pos_name</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">的天气是：</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">now_temp</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">度, 体感温度为: </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">now_feels</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">度！&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> bot.send(text)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br></div></div><h2 id="_5、增强用户体验" tabindex="-1">5、增强用户体验 <a class="header-anchor" href="#_5、增强用户体验" aria-label="Permalink to &quot;5、增强用户体验&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">📝 备注</p><p>做到这里，现在我们已经基本实现<strong>目标一</strong>了！</p><p>但是现在每次用户想要查询天气，都需要输入自己所在地城市，</p><p>这似乎有点不方便，我们希望通过<strong>绑定城市</strong>命令，</p><p>为每个用户绑定他专属的城市，下次他只需要再输入<code>天气</code>即可查询自己城市的天气。</p></div><ol start="0"><li>这就需要<strong>持久化存储</strong>用户输入的数据，一般我们使用<strong>数据库</strong>或者<strong>Json</strong>文件，甚至是TXT文件。 <ul><li><strong>持久化存储</strong>相当于一个游戏存档，下次面对<strong>相同用户</strong>我们可以读取上次他使用过的数据</li><li>本次我们使用<strong>数据库</strong>，数据库相比json、txt文件一般来说性能<strong>更好</strong>，但代码要求也会<strong>更高</strong></li><li>借助GsCore库中自带的<strong>数据库基类</strong>，我们可以很轻松的使用数据库</li><li>首先新建一个文件，命名为<code>database.py</code>，我们在这里面编写相关部分</li></ul></li></ol><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> typing </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Optional</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> sqlmodel </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Field</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 从gsuid_core库的utils模块导入预先编写好的数据库基类</span></span>
<span class="line"><span style="color:#6A737D;"># 这些基类能帮助你快速完成你的业务实现</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> gsuid_core.utils.database.base_models </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Bind</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 创建一个类（在此时相当于数据库），继承基类Bind</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WeatherBind</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Bind</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 这里的uid是基类定义好的，沿用下来可以轻松调用预先编写好的方法，例如获取全部、切换、删除、添加。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 在这里uid即是我们用户需要绑定的城市</span></span>
<span class="line"><span style="color:#E1E4E8;">    uid: Optional[</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#FFAB70;">default</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">title</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;城市&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> typing </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Optional</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sqlmodel </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Field</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 从gsuid_core库的utils模块导入预先编写好的数据库基类</span></span>
<span class="line"><span style="color:#6A737D;"># 这些基类能帮助你快速完成你的业务实现</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> gsuid_core.utils.database.base_models </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Bind</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 创建一个类（在此时相当于数据库），继承基类Bind</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WeatherBind</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Bind</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 这里的uid是基类定义好的，沿用下来可以轻松调用预先编写好的方法，例如获取全部、切换、删除、添加。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 在这里uid即是我们用户需要绑定的城市</span></span>
<span class="line"><span style="color:#24292E;">    uid: Optional[</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#E36209;">default</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, </span><span style="color:#E36209;">title</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;城市&#39;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><img src="`+h+`" alt="image-20240601225427010"><ol><li>返回<code>__init__.py</code>，在开头导入部分导入我们新建<code>database</code>模块中的<code>WeatherBind</code>类</li></ol><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> .database </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> WeatherBind</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> .database </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> WeatherBind</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>然后我们继续沿用<code>gs_weather_info</code>服务，在下面创建一个<strong>触发器</strong></li></ol><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@gs_weather_info.on_command</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;绑定城市&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bind_city</span><span style="color:#E1E4E8;">(bot: Bot, ev: Event):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@gs_weather_info.on_command</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;绑定城市&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bind_city</span><span style="color:#24292E;">(bot: Bot, ev: Event):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="3"><li>在<code>bind_city</code>中创建实际的代码</li><li></li></ol>`,18);function f(w,k,x,S,P,V){const e=E,r=y,l=i,t=c;return b(),g("div",null,[p("h1",D,[n("插件开发指南 "),s(e,{type:"tip",text:"普通"}),n(),v]),s(r,{readTime:"13",words:"3.9k"}),C,s(t,{title:"聊天界面"},{default:a(()=>[s(l,{nickname:"Wuyi无疑"},{default:a(()=>[n("天气")]),_:1}),s(l,{nickname:"GsCore"},{default:a(()=>[n("[漳州天气] 今日的天气是66度，烫死人了！")]),_:1})]),_:1}),B])}const N=d(A,[["render",f]]);export{G as __pageData,N as default};
